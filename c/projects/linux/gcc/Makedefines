#############################################################################
# Copyright (c) 1988-2007 $organization$.
#
# This software is provided by the author and contributors ``as is'' and
# any express or implied warranties, including, but not limited to, the
# implied warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author or contributors be liable
# for any direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute goods
# or services; loss of use, data, or profits; or business interruption)
# however caused and on any theory of liability, whether in contract, strict
# liability, or tort (including negligence or otherwise) arising in any way
# out of the use of this software, even if advised of the possibility of
# such damage.
#
#   File: Makedefines
#
# Author: $author$
#   Date: 4/4/2007
#
#    $Id$
#
# Linux makefile defines for XDE projects
#
#############################################################################

ifndef BUILD_TYPE
BUILD_TYPE=debug
endif

ifeq ($(BUILD_TYPE),debug)
DBGFLAGS=_DEBUG
else
DBGFLAGS=_RELEASE
endif

PKGBLD=$(PKG)/build/linux
PKGPREFIX=$(PKGBLD)/install
PKGEXECPREFIX=$(PKGBLD)/installexec

COMPILER_PATH = 
COMPILER_PREFIX = 

KCOMPILER_PATH = 
KCOMPILER_PREFIX = 

#
# xml-xerces-xalan
#
XERCESCROOT = $(PKG)/../../thirdparty/xml-xerces-xalan/xml-xerces/c
XALANCROOT = $(PKG)/../../thirdparty/xml-xerces-xalan/xml-xalan/c

XERCESXALAN_LIB = $(PKG)/../../../../build/lib
XERCESC_LIB = $(XERCESCROOT)/lib
XALANC_LIB = $(XALANCROOT)/lib

#
# Build programs
#

CC			=	$(COMPILER_PATH)$(COMPILER_PREFIX)gcc
CPP			=	$(COMPILER_PATH)$(COMPILER_PREFIX)gcc -E
CCLD		=	$(CC)
CCDSO		=	$(CCLD)
KCC 		=	$(KCOMPILER_PATH)$(KCOMPILER_PREFIX)gcc
KCCLD		=	$(KCOMPILER_PATH)$(KCOMPILER_PREFIX)ld -r
CXX			=	$(COMPILER_PATH)$(COMPILER_PREFIX)g++
CXXLD		=	$(CXX)
CXXDSO		=	$(CXXLD)
PASCAL		=	$(COMPILER_PATH)$(COMPILER_PREFIX)gpc
PASCALLD	=	$(PASCAL)
PASCALDSO	=	$(PASCALLD)
AR			=	$(COMPILER_PATH)$(COMPILER_PREFIX)ar crs
RANLIB		=	ranlib
STRIP		=	strip
LIBTOOL		=	
LIBEXT		=	a
SLIBEXT		=	so
LEX			=	echo flex
LEXLIB		=	-lfl
YACC		=	echo bison -y

ifndef BFLEX
BFLEX = bflex
endif

ifndef BYACC
BYACC = byacc
endif

#
# File programs
#

CHMOD		=	chmod
CP			=	cp
LN			=	/bin/ln -sf
MV			=	/bin/mv
RM			=	/bin/rm -f
MKDIR		=	mkdir
TOUCH		=	touch
D2U		    =	dos2unix

#
# Shell programs
#

AWK			=	gawk
SED			=	/bin/sed
SHELL		=	/bin/sh
NROFF		=	/usr/bin/nroff

#
# Installation programs
#

INSTALL		=	/usr/bin/install -c
INSTALL_BIN	=	$(LIBTOOL) $(INSTALL) -m 755 -s
INSTALL_DATA	=	$(INSTALL) -m 644
INSTALL_DIR	=	$(INSTALL) -d
INSTALL_LIB	=	$(LIBTOOL) $(INSTALL) -m 755
INSTALL_MAN	=	$(INSTALL) -m 644
INSTALL_SCRIPT	=	$(INSTALL) -m 755

#
# Compiler options
#
# OPTIM   defines compiler optimization/debugging options
# OPTIONS defines other compiler options
#

#WARNINGS    = -Wall
WARNINGS    = 

OPTIM		= $(WARNINGS) -fpic
KOPTIM		= $(WARNINGS) -O2 -pipe
CXXOPTIM    = -Wno-deprecated -fno-rtti
PASCALOPTIM = 

OPTIONS := $(shell if [ "$(BUILD_TYPE)" = "debug" ] ; then echo -g; fi)
STRIP := $(shell if [ "$(BUILD_TYPE)" = "debug" ] ; then echo "@echo _____ Dont Strip in Debug Mode " ; else echo strip; fi)

INCLUDES	= -I$(PKG)/src/cos -I$(PKG)/src $(INCPATH)
DEFINES		= -D$(DBGFLAGS)

KINCLUDES	= -I/usr/src/linux/include -I$(PKG)/src/cos -I$(PKG)/src $(INCPATH)
KDEFINES	= -D_DBPRINTK -D__KERNEL__ -DLINUX -DMODULE -D$(DBGFLAGS)

KCFLAGS		= $(KOPTIM) $(KUSRINCLUDES) $(KINCLUDES) $(KDEFINES) $(KUSRDEFINES) $(KUSRDEFS) $(KOPTIONS) $(KUSRCFLAGS) $(KUSRFLAGS)
CFLAGS		= $(OPTIM) $(USRINCLUDES) $(INCLUDES) $(DEFINES) $(USRDEFINES) $(USRDEFS) $(OPTIONS) $(USRCFLAGS) $(USRFLAGS)
CXXFLAGS	= $(OPTIM) $(CXXOPTIM) $(USRINCLUDES) $(INCLUDES) $(DEFINES) $(USRDEFINES) $(USRDEFS) $(OPTIONS) $(USRCXXFLAGS) $(USRFLAGS)
PASCALFLAGS	= $(OPTIM) $(PASCALOPTIM) $(USRPASCALINCLUDES) $(PASCALINCLUDES) $(PASCALDEFINES) $(USRPASCALDEFINES) $(OPTIONS) $(USRPASCALFLAGS)
DSOFLAGS	= -Wl,-soname,$@ -shared $(USRDSOFLAGS)
LDFLAGS		= -L$(PKGBLD)/lib $(USRLIBDIRS) $(USRLDFLAGS) $(OPTIM) $(CXXOPTIM)
ARFLAGS		= 
PASCALLDFLAGS		= $(USRPASCALLDFLAGS) $(OPTIM) $(PASCALOPTIM)

#
# Directories
#
# The first section uses the GNU names (which are *extremely*
# difficult to find in a makefile because they are lowercase...)
# We have to define these first because autoconf uses ${prefix}
# and ${exec_prefix} for most of the other directories...
#
# This is immediately followed by definition in ALL CAPS for the
# needed directories...
#

prefix	=	$(PKGPREFIX)
exec_prefix	=	$(PKGEXECPREFIX)

bindir		=	${exec_prefix}/bin
sbindir		=	${exec_prefix}/sbin
libdir		=	${exec_prefix}/lib
libexecdir	=	${exec_prefix}/libexec
datadir		=	${prefix}/data
includedir	=	${prefix}/include
infodir		=	${prefix}/info
localstatedir = ${prefix}/var
mandir		=	${prefix}/man
sysconfdir	=	${prefix}/etc
srcdir		=	.
top_srcdir	=	.

MANDIR		=	$(PKGBLD)/man
BINDIR		=	$(PKGBLD)/bin
SBINDIR		=	$(PKGBLD)/sbin
DATADIR		=	$(PKGBLD)/data
DOCDIR		=	$(PKGBLD)/docs
CFGDIR		=	$(PKGBLD)/config
INCLUDEDIR	=	$(PKGBLD)/include
LIBDIR		=	$(PKGBLD)/lib
LOCALEDIR	= 	$(PKGBLD)/locale
LOGDIR		= 	$(PKGBLD)/log
INITDIR		=	/etc/rc.d
INITDDIR	=	../init.d

PKGROOT		=	$(PKG)

#
# Rules
#

.SUFFIXES:	.c .cpp .cxx .h .hpp .hxx .s .S .o .so .a

.s.o:
	@$(AS) -o $*.o $<  

.S.o:
	@$(CC) -c -o $*.o $<  

.l.c:
	@echo Generating Lexer $@ from $< ...
	@$(LEX) -o $@ $<

.y.c:
	@echo Generating Parser $@ from $< ...
	@$(YACC) -o $@ $<

.l.cxx:
	@echo Generating Lexer $@ from $< ...
	@echo $(BFLEX) -+vLI -S$(XDE_SRC)/cyy/yylexer.skl -o$@ $<

.y.cxx:
	@echo Generating Parser $@ from $< ...
	@echo $(BYACC) -+ld -D $*.h -o $@ $<

.c.o:
	@echo Compiling $(BUILD_TYPE) $< ...
	@$(CC) -c $(CFLAGS) -o $@ $<

.cpp.o:
	@echo Compiling $(BUILD_TYPE) $< ...
	@$(CXX) -c $(CXXFLAGS) -o $@ $< 

.cxx.o:
	@echo Compiling $(BUILD_TYPE) $< ...
	@$(CXX) -c $(CXXFLAGS) -o $@ $<

.pas.o:
	@echo Compiling $(BUILD_TYPE) $< ...
	@$(PASCAL) -c $(PASCALFLAGS) -o $@ $<
